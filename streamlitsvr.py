# -*- coding: utf-8 -*-
"""streamlitsvr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zDg5UMjK1af5nQYwWkTQI_9i7OItWawr
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import GridSearchCV, KFold, train_test_split
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt
import warnings

# Mengabaikan warning untuk tampilan yang lebih bersih
warnings.filterwarnings('ignore')

# --- DEFINISI FUNGSI DARI svr_penjualan_komputer.py (Disesuaikan) ---

# Menggunakan cache agar data hanya dimuat sekali
@st.cache_data
def load_and_prepare_data(csv_path='SuperStore_Sales_Dataset.csv'):
    """Memuat dan menyiapkan data. Target: Quantity."""
    try:
        # PENTING: Untuk menjalankan di Canvas, file harus di-upload.
        # Kita asumsikan file sudah diunggah, jika tidak akan terjadi error.
        df = pd.read_csv(csv_path)
    except FileNotFoundError:
        st.error(f"ERROR: File '{csv_path}' tidak ditemukan. Pastikan sudah diunggah.")
        return None, None, None, None, None

    # Pembersihan kolom
    df.columns = df.columns.str.replace(r'[+O6G3A1:R6]', '', regex=True).str.strip()

    # Filtering data: Kategori Technology (kecuali Phones)
    df_filtered = df[df['Category'] == 'Technology'].copy()
    df_filtered = df_filtered[df_filtered['Sub-Category'] != 'Phones'].copy()

    # Memastikan Quantity > 0 (untuk data regresi yang valid)
    df_filtered = df_filtered[df_filtered['Quantity'] > 0].copy()

    # Kolom yang akan dihapus (Kolom identifikasi, tanggal, lokasi, dll.)
    columns_to_drop = [
        'Row ID', 'Order ID', 'Customer ID', 'Customer Name', 'Product ID', 'Product Name',
        'Order Date', 'Ship Date',
        'Country', 'City', 'State', 'Region',
        'Category', 'Returns', 'ind1', 'ind2'
    ]

    df_model = df_filtered.drop(columns=columns_to_drop, errors='ignore').copy()

    # Target Regresi
    target = 'Quantity'

    # Keluarkan target dari fitur X
    # 'Quantity' adalah target
    columns_to_exclude_from_X = [target]

    # 'Profit' dan 'Sales' sekarang adalah fitur (prediktor)
    X = df_model.drop(columns=columns_to_exclude_from_X, errors='ignore')
    y = df_model[target]

    # Identifikasi Fitur
    categorical_features = ['Ship Mode', 'Segment', 'Sub-Category', 'Payment Mode']
    # Fitur Numerik: Sales dan Profit (karena Quantity adalah target)
    numerical_features = ['Sales', 'Profit']

    return X, y, categorical_features, numerical_features, df_model

@st.cache_data
def create_and_train_model(X, y, cat_features, num_features):
    """Membuat Preprocessor, Pipeline, dan Melatih Model SVR."""

    # 1. Preprocessor (Scaler untuk numerik dan OneHotEncoder untuk kategorikal)
    numerical_transformer = StandardScaler()
    categorical_transformer = OneHotEncoder(handle_unknown='ignore')

    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numerical_transformer, num_features),
            ('cat', categorical_transformer, cat_features)
        ],
        remainder='passthrough'
    )

    # 2. Pipeline (Preprocessor + SVR)
    pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('regressor', SVR(kernel='rbf', C=10, gamma='auto')) # Tambahkan hyperparameter dasar untuk performa
    ])

    # 3. Pembagian Data
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )

    # 4. Melatih Model
    pipeline.fit(X_train, y_train)
    best_model = pipeline

    # 5. Prediksi dan Evaluasi
    y_pred = best_model.predict(X_test)

    # Mengubah prediksi menjadi bilangan bulat, karena 'Quantity' adalah diskret
    y_pred_int = np.round(y_pred).astype(int)
    # Memastikan prediksi minimal 1
    y_pred_int[y_pred_int < 1] = 1

    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    metrics = {
        'Metric': ['Mean Squared Error (MSE)', 'Mean Absolute Error (MAE)', 'R-squared ($R^2$)'],
        'Value': [mse, mae, r2]
    }

    return y_test, y_pred, metrics, best_model

# --- APLIKASI STREAMLIT ---

st.set_page_config(
    page_title="Analisis SVR Penjualan Komputer",
    layout="wide"
)

st.title("🖥️ Analisis Regresi Kuantitas Penjualan Komputer dengan SVR")
st.markdown("Aplikasi ini memuat data penjualan superstore, memfilter data untuk kategori **'Technology'** (kecuali 'Phones'), dan melatih model **Support Vector Regression (SVR)** untuk memprediksi **Kuantitas**.")
st.markdown("---")

# 1. Pemuatan dan Persiapan Data
st.header("1. Data yang Diproses")

X, y, cat_features, num_features, df_model = load_and_prepare_data()

if df_model is not None:
    st.subheader("Cuplikan Data yang Digunakan untuk Pemodelan")
    st.markdown(f"**Target Regresi:** `Quantity`")
    st.markdown(f"**Fitur Prediktor:** `Sales`, `Profit`, `Ship Mode`, `Segment`, `Sub-Category`, `Payment Mode`")
    st.markdown(f"**Bentuk Data Akhir:** {df_model.shape} baris")

    # Tampilkan 10 baris pertama
    st.dataframe(df_model.head(10).style.highlight_max(axis=0))

    # 2. Pelatihan dan Evaluasi Model
    st.header("2. Pelatihan Model SVR dan Hasil Evaluasi")

    # Tombol untuk memulai pelatihan model
    if st.button('Mulai Pelatihan Model Regresi (SVR)'):
        with st.spinner('Melatih model SVR (Menggunakan SVR RBF dengan C=10, gamma=auto)...'):
            y_test, y_pred, metrics_df, model = create_and_train_model(X, y, cat_features, num_features)

        # Tampilkan Metrik
        st.subheader("Metrik Evaluasi Model")
        st.dataframe(pd.DataFrame(metrics_df).set_index('Metric'))
        st.info("Catatan: Nilai $R^2$ mendekati 1 menunjukkan kecocokan model yang lebih baik pada data. Karena kuantitas adalah bilangan diskret, MSE dan MAE akan lebih diutamakan.")

        # 3. Visualisasi
        st.header("3. Visualisasi Hasil Prediksi")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("Prediksi vs. Nilai Sebenarnya (Scatter Plot)")
            fig, ax = plt.subplots(figsize=(8, 6))
            ax.scatter(y_test, y_pred, alpha=0.6, color='#1f77b4')
            ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2, label='Prediksi Ideal')
            ax.set_xlabel("Nilai Sebenarnya ($y_{test}$)", fontsize=12)
            ax.set_ylabel("Nilai Prediksi ($y_{pred}$)", fontsize=12)
            ax.set_title("Scatter Plot: Prediksi vs. Nilai Sebenarnya", fontsize=14)
            ax.grid(True, linestyle=':', alpha=0.7)
            st.pyplot(fig)
            st.markdown("*Garis putus-putus merah menunjukkan prediksi ideal.*")

        with col2:
            st.subheader("Distribusi Error Prediksi")
            errors = y_test - y_pred
            fig_hist, ax_hist = plt.subplots(figsize=(8, 6))
            ax_hist.hist(errors, bins=30, edgecolor='white', alpha=0.8, color='#ff7f0e')
            ax_hist.axvline(errors.mean(), color='red', linestyle='dashed', linewidth=2, label=f'Rata-rata Error: {errors.mean():.4f}')
            ax_hist.set_xlabel("Error (Nilai Sebenarnya - Prediksi)", fontsize=12)
            ax_hist.set_ylabel("Frekuensi", fontsize=12)
            ax_hist.set_title("Histogram Error Prediksi", fontsize=14)
            ax_hist.legend()
            st.pyplot(fig_hist)
            st.markdown(f"*Rata-rata error (garis merah): **{errors.mean():.4f}** (Idealnya mendekati nol)*")

    else:
        st.info("Tekan tombol di atas untuk menjalankan pelatihan model dan melihat hasilnya.")

    st.markdown("---")
    st.caption("Aplikasi ini dibangun menggunakan Streamlit, scikit-learn, dan matplotlib.")